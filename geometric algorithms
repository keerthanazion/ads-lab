import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {

    // Calculate distance from a point to a line
    private static double calculateDistance(double A, double B, double C, double x, double y) {
        return Math.abs(A * x + B * y + C) / Math.sqrt(A * A + B * B);
    }

    // Calculate mean of a list of points
    private static double[] calculateMean(List<double[]> points) {
        double sumX = 0, sumY = 0;
        for (double[] point : points) {
            sumX += point[0];
            sumY += point[1];
        }
        int count = points.size();
        return count > 0 ? new double[]{sumX / count, sumY / count} : null;
    }

    // Analyze points and classify them based on their position relative to the line
    private static void analyzePoints(double A, double B, double C, List<double[]> points) {
        List<double[]> leftPoints = new ArrayList<>();
        List<double[]> rightPoints = new ArrayList<>();
        double totalDistanceLeft = 0, totalDistanceRight = 0;

        for (double[] point : points) {
            double x = point[0], y = point[1];
            double result = A * x + B * y + C;
            double distance = calculateDistance(A, B, C, x, y);

            if (result > 0) {
                rightPoints.add(point);
                totalDistanceRight += distance;
                System.out.printf("Point (%.2f, %.2f) is on the right side, distance: %.2f\n", x, y, distance);
            } else if (result < 0) {
                leftPoints.add(point);
                totalDistanceLeft += distance;
                System.out.printf("Point (%.2f, %.2f) is on the left side, distance: %.2f\n", x, y, distance);
            } else {
                System.out.printf("Point (%.2f, %.2f) is on the line, distance: %.2f\n", x, y, distance);
            }
        }

        // Display mean and average distance for each side
        printSummary("left", leftPoints, totalDistanceLeft);
        printSummary("right", rightPoints, totalDistanceRight);
    }

    // Print summary of points, mean, and average distance
    private static void printSummary(String side, List<double[]> points, double totalDistance) {
        if (points.isEmpty()) {
            System.out.printf("No points on the %s side.\n", side);
            return;
        }
        double[] mean = calculateMean(points);
        System.out.printf("Mean of points on the %s side: (%.2f, %.2f), average distance: %.2f\n",
                side, mean[0], mean[1], totalDistance / points.size());
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input the line equation coefficients
        System.out.println("Enter coefficients (A, B, C) for the line equation Ax + By + C = 0:");
        double A = scanner.nextDouble();
        double B = scanner.nextDouble();
        double C = scanner.nextDouble();

        // Input points
        System.out.print("Enter the number of points: ");
        int numPoints = scanner.nextInt();
        List<double[]> points = new ArrayList<>();

        for (int i = 0; i < numPoints; i++) {
            System.out.printf("Enter coordinates of point %d (x y): ", i + 1);
            double x = scanner.nextDouble();
            double y = scanner.nextDouble();
            points.add(new double[]{x, y});
        }

        // Analyze points
        analyzePoints(A, B, C, points);

        scanner.close();
    }
}
