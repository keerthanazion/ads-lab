import java.util.Arrays;

public class Main{
    private static final int V = 5; // Number of vertices in the graph

    // Function to find the vertex with the minimum distance value
    private static int minDistance(int dist[], boolean sptSet[]) {
        int min = Integer.MAX_VALUE, minIndex = -1;

        for (int v = 0; v < V; v++) {
            if (!sptSet[v] && dist[v] <= min) {
                min = dist[v];
                minIndex = v;
            }
        }
        return minIndex;
    }

    // Function that implements Dijkstra's algorithm for a graph represented using an adjacency matrix
    public static void dijkstra(int graph[][], int src) {
        int dist[] = new int[V]; // Output array to hold the shortest distance from source to each vertex
        boolean sptSet[] = new boolean[V]; // Shortest Path Tree set

        // Initialize all distances as infinite and sptSet[] as false
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0; // Distance from source to itself is always 0

        // Find the shortest path for all vertices
        for (int count = 0; count < V - 1; count++) {
            // Pick the minimum distance vertex from the set of vertices not yet processed
            int u = minDistance(dist, sptSet);

            // Mark the picked vertex as processed
            sptSet[u] = true;

            // Update dist value of the adjacent vertices of the picked vertex
            for (int v = 0; v < V; v++) {
                // Update dist[v] if and only if it's not in sptSet, there is an edge from u to v,
                // and the total weight of the path from src to v through u is smaller than the current value of dist[v]
                if (!sptSet[v] && graph[u][v] != 0 && dist[u] != Integer.MAX_VALUE && dist[u] + graph[u][v] < dist[v]) {
                    dist[v] = dist[u] + graph[u][v];
                }
            }
        }

        // Print the constructed distance array
        System.out.println("Vertex \t Distance from Source");
        for (int i = 0; i < V; i++) {
            System.out.println(i + " \t " + dist[i]);
        }
    }

    public static void main(String[] args) {
        // Example graph represented as an adjacency matrix
        int graph[][] = new int[][] {
            { 0, 10, 3, 0, 0 },
            { 10, 0, 1, 2, 0 },
            { 3, 1, 0, 8, 2 },
            { 0, 2, 8, 0, 7 },
            { 0, 0, 2, 7, 0 }
        };
        dijkstra(graph, 0); // Run Dijkstra's algorithm from source vertex 0
    }
}
